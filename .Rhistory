knitr::opts_chunk$set(echo = TRUE)
#load packages
library(dplyr)
library(flextable)
library(ggplot2)
library(collapse)
library(labelled)
library(compareGroups)
library(gee)
library(geepack)
library(pROC)
library(ROCR)
library(plotROC)
library(gridExtra)
library(kableExtra)
library(ggalluvial)
pathway <- "~/Library/CloudStorage/Box-Box/Puma Analysis/Analysis/Code"
month12 <- readRDS(file.path(pathway, "/RDS/puma_month12.rds"))
puma_all <- readRDS(file.path(pathway, "/RDS/puma_long_clean.rds"))
secondary_long <- readRDS(file.path(pathway, "/RDS/puma_secondary_long.rds"))
output_path <- "~/Library/CloudStorage/Box-Box/Puma Analysis/Analysis/Code/Output"
# Source utility functions
source(file.path(pathway, "roc_utils.R"))
# Create ROC objects using utility function
urine_results <- create_roc(month12$ut_result, month12$wilson_adh)
hair_results <- create_roc(month12$detect_tfv, month12$wilson_adh)
hair2_results <- create_roc(month12$hair2_coded, month12$wilson_adh)
# Create legend labels with AUC values
urine_legend <- create_legend_with_auc("Urine (Neg/Pos)", urine_results$auc)
hair_legend <- create_legend_with_auc("Hair (Neg/Pos)", hair_results$auc)
hair2_legend <- create_legend_with_auc("Hair (Neg + Low/High)", hair2_results$auc)
# Plot ROC curves with AUC values in the legend
plot_multiple_roc(
roc_list = list(urine_results$roc, hair_results$roc, hair2_results$roc),
labels = c(urine_legend, hair_legend, hair2_legend),
colors = c("blue", "red", "darkgreen"),
main = "ROC Curves for Adherence Prediction"
)
# Plot just the hair2 ROC curve
plot(hair2_results$roc, col = "darkgreen", lwd = 2,
main = "ROC Curve for Adherence Predicition of Low vs High PrEP Adherence")
legend("bottomright",
legend = hair2_legend,
col = "darkgreen",
lwd = 2)
# Calculate cutoff metrics for urine
cutoffs_urine <- seq(0, 100, by = 10)
results_urine <- calculate_cutoff_metrics(urine_results$roc, cutoffs_urine)
# Find best cutoff for urine
best_cutoff_urine <- find_best_cutoff(urine_results$roc)
# Find cutoff that gives sensitivity closest to 90%
coords_df <- as.data.frame(coords(urine_results$roc, "all"))
closest_to_90 <- coords_df[which.min(abs(coords_df$sensitivity - 0.9)),]
cutoff_90sens_urine <- closest_to_90$threshold
# Calculate cutoff metrics for hair
cutoffs_hair <- seq(0, 100, by = 10)
results_hair <- calculate_cutoff_metrics(hair_results$roc, cutoffs_hair)
# Find best cutoff for hair
best_cutoff_hair <- find_best_cutoff(hair_results$roc)
results_hair
# Calculate cutoff metrics for hair2
results_hair2 <- calculate_cutoff_metrics(hair2_results$roc, cutoffs_hair)
# Find best cutoff for hair2
best_cutoff_hair2 <- find_best_cutoff(hair2_results$roc)
results_hair2
# Create a combined model using utility function
predictors_df <- month12 %>%
select(ut_result, wilson_adh, hair2_coded) %>%
filter(!is.na(hair2_coded))
combined_results <- create_combined_roc(
response = month12$hair2_coded[!is.na(month12$hair2_coded)],
predictors = predictors_df,
model_formula = as.formula("response ~ wilson_adh + ut_result"),
family = poisson(link = "log")
)
# Plot the ROC curve
plot(combined_results$roc, main = "ROC Curve for Combined Predictors of Self-report Adherence and Urine Result",
col = "blue", lwd = 2)
# Add legend with AUC
legend("bottomright",
legend = paste0("Hair (Neg + Low/High) AUC = ", combined_results$auc_formatted),
col = "blue", lwd = 2)
# Calculate cutoff metrics for a sequence of cutoffs
cutoffs <- seq(0, 1, by = 0.1)
results_combined <- calculate_cutoff_metrics(combined_results$roc, cutoffs)
results_combined
# 1. Combined model (adherence score + urine)
plot1 <- create_roc_plot(combined_results$roc, "Self-Report Adherence and Urine Result Prediction for Hair Results", "blue", "Hair (Neg + Low/High), AUC")
# 2. Urine outcome
plot2 <- create_roc_plot(urine_results$roc, "Self-Report Adherence Prediction of Urine Results", "red", "Urine (Neg/Pos), AUC")
# 3. Hair Outcome
plot3 <- create_roc_plot(hair_results$roc, "Self-Report Adherence Prediction of Hair Results", "green", "Hair (Neg/Pos), AUC")
# 4. Another analysis (e.g., with interaction terms)
plot4 <- create_roc_plot(hair2_results$roc, "Self-Report Adherence Prediction of Hair Results", "purple", "Hair (Neg + Low/High), AUC")
# Combine all plots into a 2x2 grid
combined_plot <- grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
# Save the combined plot
ggsave(file.path(output_path, "/combined_roc_plots.png"), combined_plot, width = 12, height = 8, dpi = 300)
prevalence_urine <- sum(month12$ut_result)/length(month12$ut_result)
sum(month12$ut_result)
table(month12$ut_result)
table(month12$ut_result, useNA = "ifany")
#' Calculate sensitivity and specificity for a sequence of cutoffs
#'
#' @param roc_obj ROC curve object
#' @param cutoffs Vector of cutoff values to evaluate
#' @return A dataframe with cutoffs, sensitivity, and specificity
calculate_cutoff_metrics <- function(roc_obj, cutoffs, prevalence = NULL) {
sensitivity_values <- numeric(length(cutoffs))
specificity_values <- numeric(length(cutoffs))
ppv_values <- numeric(length(cutoffs))
npv_values <- numeric(length(cutoffs))
for(i in 1:length(cutoffs)) {
# Get coordinates for this specific threshold
coords_at_cutoff <- pROC::coords(roc_obj, cutoffs[i], input = "threshold")
# Store sensitivity and specificity values
sensitivity_values[i] <- coords_at_cutoff$sensitivity
specificity_values[i] <- coords_at_cutoff$specificity
# Calculate PPV and NPV if prevalence is provided
if(!is.null(prevalence)) {
# Calculate PPV: (sensitivity * prevalence) / (sensitivity * prevalence + (1-specificity) * (1-prevalence))
ppv_values[i] <- (sensitivity_values[i] * prevalence) /
(sensitivity_values[i] * prevalence + (1 - specificity_values[i]) * (1 - prevalence))
# Calculate NPV: (specificity * (1-prevalence)) / ((1-sensitivity) * prevalence + specificity * (1-prevalence))
npv_values[i] <- (specificity_values[i] * (1 - prevalence)) /
((1 - sensitivity_values[i]) * prevalence + specificity_values[i] * (1 - prevalence))
} else {
# If no prevalence provided, set to NA
ppv_values[i] <- NA
npv_values[i] <- NA
}
}
# Create dataframe
results_df <- data.frame(
cutoff = round(cutoffs, 3),
sensitivity = round(sensitivity_values, 3),
specificity = round(specificity_values, 3)
)
# Add PPV and NPV columns if prevalence was provided
if(!is.null(prevalence)) {
results_df$ppv <- round(ppv_values, 3)
results_df$npv <- round(npv_values, 3)
}
return(results_df)
}
pathway <- "~/Library/CloudStorage/Box-Box/Puma Analysis/Analysis/Code"
month12 <- readRDS(file.path(pathway, "/RDS/puma_month12.rds"))
puma_all <- readRDS(file.path(pathway, "/RDS/puma_long_clean.rds"))
secondary_long <- readRDS(file.path(pathway, "/RDS/puma_secondary_long.rds"))
output_path <- "~/Library/CloudStorage/Box-Box/Puma Analysis/Analysis/Code/Output"
# Source utility functions
source(file.path(pathway, "roc_utils.R"))
prevalence_hair <- sum(month12$detect_tfv)/length(!is.na(month12$detect_tfv))
length(!is.na(month12$detect_tfv)
length(!is.na(month12$detect_tfv))
length(!is.na(month12$detect_tfv))
sum(month12$detect_tfv)
?sum()
?sum
View(month12)
sum(month12$detect_tfv, na.rm = TRUE)
length(!is.na(month12$detect_tfv)
)
length(month12$detect_tfv)
!is.na(month12$detect_tfv)
length(month12[!is.na(month12$detect_tfv)])
length(month12$detect_tfv[!is.na(month12$detect_tfv)])
prevalence_hair <- sum(month12$detect_tfv, na.rm = TRUE)/length(month12$detect_tfv[!is.na(month12$detect_tfv)])
prevalence_hair2 <- sum(month12$hair2_coded, na.rm = TRUE)/length(month12$hair2_coded[!is.na(month12$hair2_coded)])
sum(month12$hair2_coded, na.rm = TRUE)
table(month12$hair2_coded, useNA = "ifany")
#Calculate Prevalence
prevalence_hair2 <- sum(month12$hair2_coded, na.rm = TRUE)/length(month12$hair2_coded[!is.na(month12$hair2_coded)])
# Calculate cutoff metrics for hair2
results_hair2 <- calculate_cutoff_metrics(hair2_results$roc, cutoffs_hair, prevalence = prevalence_hair2)
# Find best cutoff for hair2
best_cutoff_hair2 <- find_best_cutoff(hair2_results$roc)
results_hair2
#Calculate Prevalence
prevalence_hair <- sum(month12$detect_tfv, na.rm = TRUE)/length(month12$detect_tfv[!is.na(month12$detect_tfv)])
# Calculate cutoff metrics for hair
cutoffs_hair <- seq(0, 100, by = 10)
results_hair <- calculate_cutoff_metrics(hair_results$roc, cutoffs_hair, prevalence = prevalence_hair)
# Find best cutoff for hair
best_cutoff_hair <- find_best_cutoff(hair_results$roc)
results_hair
# Calculate Prevalence
prevalence_urine <- sum(month12$ut_result)/length(month12$ut_result)
# Calculate cutoff metrics for urine
cutoffs_urine <- seq(0, 100, by = 10)
results_urine <- calculate_cutoff_metrics(urine_results$roc, cutoffs_urine, prevalence = prevalence_urine)
# Find best cutoff for urine
best_cutoff_urine <- find_best_cutoff(urine_results$roc)
# Find cutoff that gives sensitivity closest to 90%
coords_df <- as.data.frame(coords(urine_results$roc, "all"))
closest_to_90 <- coords_df[which.min(abs(coords_df$sensitivity - 0.9)),]
cutoff_90sens_urine <- closest_to_90$threshold
View(results_urine)
View(results_urine)
View(results_hair)
View(results_hair2)
knitr::opts_chunk$set(echo = TRUE)
# Combine all plots into a 2x2 grid
combined_plot <- grid.arrange(plot1, plot4, plot2, plot3, ncol = 2)
#load packages
library(dplyr)
library(flextable)
library(ggplot2)
library(collapse)
library(labelled)
library(compareGroups)
library(gee)
library(geepack)
library(pROC)
library(ROCR)
library(plotROC)
library(gridExtra)
library(kableExtra)
library(ggalluvial)
pathway <- "~/Library/CloudStorage/Box-Box/Puma Analysis/Analysis/Code"
month12 <- readRDS(file.path(pathway, "/RDS/puma_month12.rds"))
puma_all <- readRDS(file.path(pathway, "/RDS/puma_long_clean.rds"))
secondary_long <- readRDS(file.path(pathway, "/RDS/puma_secondary_long.rds"))
output_path <- "~/Library/CloudStorage/Box-Box/Puma Analysis/Analysis/Code/Output"
# Source utility functions
source(file.path(pathway, "roc_utils.R"))
combined_plot <- grid.arrange(plot1, plot4, plot2, plot3, ncol = 2)
combined_plot
combined_plot <- grid.arrange(plot4, plot1, plot2, plot3, ncol = 2)
combined_plot
# Save the combined plot
ggsave(file.path(output_path, "/combined_roc_plots.png"), combined_plot, width = 12, height = 8, dpi = 300)
combined_plot <- grid.arrange(plot1, plot4, plot2, plot3, ncol = 2)
combined_plot
# Save the combined plot
ggsave(file.path(output_path, "/combined_roc_plots.png"), combined_plot, width = 12, height = 8, dpi = 300)
